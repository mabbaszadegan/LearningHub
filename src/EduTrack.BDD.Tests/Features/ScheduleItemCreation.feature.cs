// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EduTrack.BDD.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ScheduleItemCreationFeature : object, Xunit.IClassFixture<ScheduleItemCreationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ScheduleItemCreation.feature"
#line hidden
        
        public ScheduleItemCreationFeature(ScheduleItemCreationFeature.FixtureData fixtureData, EduTrack_BDD_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Schedule Item Creation", "    As a teacher\r\n    I want to create schedule items for my teaching plan\r\n    S" +
                    "o that I can assign tasks and activities to my students", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
    #line hidden
#line 7
        testRunner.Given("I am logged in as a teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
        testRunner.And("I have a teaching plan \"Advanced Mathematics\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a simple writing assignment")]
        [Xunit.TraitAttribute("FeatureTitle", "Schedule Item Creation")]
        [Xunit.TraitAttribute("Description", "Create a simple writing assignment")]
        [Xunit.TraitAttribute("Category", "smoke")]
        public void CreateASimpleWritingAssignment()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a simple writing assignment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 12
        testRunner.Given("I am on the schedule item creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "Type",
                            "Writing"});
                table1.AddRow(new string[] {
                            "Title",
                            "Homework Assignment"});
                table1.AddRow(new string[] {
                            "Description",
                            "Complete exercises 1-10"});
#line 13
        testRunner.When("I fill in the basic information:", ((string)(null)), table1, "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "Start Date",
                            "1403/01/01"});
                table2.AddRow(new string[] {
                            "Due Date",
                            "1403/01/08"});
                table2.AddRow(new string[] {
                            "Start Time",
                            "09:00"});
                table2.AddRow(new string[] {
                            "Due Time",
                            "17:00"});
#line 18
        testRunner.And("I set the schedule:", ((string)(null)), table2, "And ");
#line hidden
#line 24
        testRunner.And("I set it as mandatory with max score 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
        testRunner.And("I assign it to students", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
        testRunner.And("I add content with instructions \"Please complete all exercises\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
        testRunner.When("I save the schedule item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
        testRunner.Then("the schedule item should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a quiz with multiple choice questions")]
        [Xunit.TraitAttribute("FeatureTitle", "Schedule Item Creation")]
        [Xunit.TraitAttribute("Description", "Create a quiz with multiple choice questions")]
        [Xunit.TraitAttribute("Category", "regression")]
        public void CreateAQuizWithMultipleChoiceQuestions()
        {
            string[] tagsOfScenario = new string[] {
                    "regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a quiz with multiple choice questions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 32
        testRunner.Given("I am on the schedule item creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Type",
                            "Quiz"});
                table3.AddRow(new string[] {
                            "Title",
                            "Chapter 1 Quiz"});
                table3.AddRow(new string[] {
                            "Description",
                            "Test your knowledge of basic concepts"});
#line 33
        testRunner.When("I fill in the basic information:", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Start Date",
                            "1403/01/15"});
                table4.AddRow(new string[] {
                            "Due Date",
                            "1403/01/22"});
                table4.AddRow(new string[] {
                            "Start Time",
                            "10:00"});
                table4.AddRow(new string[] {
                            "Due Time",
                            "11:00"});
#line 38
        testRunner.And("I set the schedule:", ((string)(null)), table4, "And ");
#line hidden
#line 44
        testRunner.And("I set it as mandatory with max score 50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.And("I assign it to students", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
        testRunner.And("I add quiz content with 10 multiple choice questions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
        testRunner.When("I save the schedule item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
        testRunner.Then("the schedule item should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Attempt to create assignment with invalid data")]
        [Xunit.TraitAttribute("FeatureTitle", "Schedule Item Creation")]
        [Xunit.TraitAttribute("Description", "Attempt to create assignment with invalid data")]
        [Xunit.TraitAttribute("Category", "error-handling")]
        public void AttemptToCreateAssignmentWithInvalidData()
        {
            string[] tagsOfScenario = new string[] {
                    "error-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to create assignment with invalid data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
    this.FeatureBackground();
#line hidden
#line 52
        testRunner.Given("I am on the schedule item creation page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "Type",
                            "Writing"});
                table5.AddRow(new string[] {
                            "Title",
                            "\"\""});
                table5.AddRow(new string[] {
                            "Description",
                            "Test Description"});
#line 53
        testRunner.When("I fill in the basic information:", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "Start Date",
                            "1403/01/01"});
                table6.AddRow(new string[] {
                            "Due Date",
                            "1403/01/08"});
#line 58
        testRunner.And("I set the schedule:", ((string)(null)), table6, "And ");
#line hidden
#line 62
        testRunner.When("I try to save the schedule item", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
        testRunner.Then("I should see an error message \"Title cannot be empty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
        testRunner.And("the schedule item should not be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ScheduleItemCreationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ScheduleItemCreationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
