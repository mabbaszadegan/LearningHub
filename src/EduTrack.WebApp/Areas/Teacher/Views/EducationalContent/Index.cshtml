@using EduTrack.Application.Common.Models.Courses
@model List<EducationalContentDto>
@{
    ViewData["Title"] = "مدیریت محتوای آموزشی";
}

<!-- Page Header -->
<div class="page-header-minimal mb-3">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">مدیریت محتوای آموزشی</h1>
            <p class="page-subtitle mb-0">
                <a asp-controller="Courses" asp-action="Index" class="breadcrumb-link">
                    <i class="fas fa-chevron-right"></i> دوره‌ها
                </a>
                <span class="mx-2">/</span>
                <a asp-controller="Chapters" asp-action="Index" asp-route-courseId="@ViewBag.CourseId" class="breadcrumb-link">
                    @ViewBag.CourseTitle
                </a>
                <span class="mx-2">/</span>
                <a asp-controller="SubChapters" asp-action="Index" asp-route-chapterId="@ViewBag.ChapterId" class="breadcrumb-link">
                    @ViewBag.ChapterTitle
                </a>
                <span class="mx-2">/</span>
                <span>@ViewBag.SubChapterTitle</span>
            </p>
        </div>
        <a asp-action="Create" asp-route-subChapterId="@ViewBag.SubChapterId" class="btn-action-primary">
            <i class="fas fa-plus"></i>
            <span>محتوا جدید</span>
        </a>
    </div>
</div>

<!-- Filter/Sort Info Bar -->
@if (Model.Any())
{
    <div class="filter-bar-minimal mb-3">
        <div class="filter-group">
            <button class="filter-btn-minimal active" data-filter="all">
                <i class="fas fa-file-alt"></i>
                <span>همه (@Model.Count)</span>
            </button>
            <button class="filter-btn-minimal" data-filter="active">
                <i class="fas fa-check-circle"></i>
                <span>فعال (@Model.Count(c => c.IsActive))</span>
            </button>
            <button class="filter-btn-minimal" data-filter="inactive">
                <i class="fas fa-times-circle"></i>
                <span>غیرفعال (@Model.Count(c => !c.IsActive))</span>
            </button>
        </div>
        <div class="drag-info">
            <i class="fas fa-grip-lines"></i>
            <span>برای تغییر ترتیب، محتوا را بکشید و رها کنید</span>
        </div>
    </div>
}

@if (Model.Any())
{
    <!-- Content List with Enhanced Drag & Drop -->
    <div class="content-sortable-list" id="contentsContainer">
        @foreach (var content in Model.OrderBy(c => c.Order))
        {
            <div class="content-card-draggable" data-content-id="@content.Id" data-status="@(content.IsActive ? "active" : "inactive")" data-is-active="@(content.IsActive ? "true" : "false")">
                <!-- Enhanced Drag Handle with Up/Down -->
                <div class="drag-handle-enhanced">
                    <button class="move-btn-content move-up" data-content-id="@content.Id" data-direction="up" title="انتقال به بالا">
                        <i class="fas fa-chevron-up"></i>
                    </button>
                    <div class="drag-lines">
                        <i class="fas fa-grip-lines"></i>
                    </div>
                    <span class="drag-hint">کشیدن</span>
                    <button class="move-btn-content move-down" data-content-id="@content.Id" data-direction="down" title="انتقال به پایین">
                        <i class="fas fa-chevron-down"></i>
                    </button>
                </div>
                
                <!-- Card Content -->
                <div class="content-card-content">
                    <!-- Header Section -->
                    <div class="content-header-section">
                        <div class="content-info">
                            <h3 class="content-title-main">@content.Title</h3>
                            @if (!string.IsNullOrEmpty(content.Description))
                            {
                                <p class="content-description">@content.Description</p>
                            }
                        </div>
                        <div class="content-actions-top">
                            <label class="toggle-switch-minimal" title="فعال/غیرفعال">
                                <input type="checkbox" 
                                       class="toggle-content-active" 
                                       data-content-id="@content.Id" 
                                       @(content.IsActive ? "checked" : "") />
                                <span class="toggle-slider-minimal"></span>
                            </label>
                            <div class="dropdown">
                                <button class="btn-icon-minimal" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li>
                                        <a class="dropdown-item" asp-action="Edit" asp-route-id="@content.Id">
                                            <i class="fas fa-edit"></i>ویرایش محتوا
                                        </a>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form asp-action="Delete" asp-route-id="@content.Id" method="post" 
                                              onsubmit="return confirm('آیا از حذف این محتوا اطمینان دارید؟')">
                                            <button type="submit" class="dropdown-item text-danger">
                                                <i class="fas fa-trash"></i>حذف
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Content Type Badge -->
                    <div class="content-type-section mb-3">
                        <span class="badge content-type-badge @GetContentTypeClass(content.Type)">
                            <i class="@GetContentTypeIcon(content.Type)"></i>
                            @GetContentTypeName(content.Type)
                        </span>
                    </div>
                    
                    <!-- Content Preview -->
                    <div class="content-preview-section mb-3">
                        @switch (content.Type)
                        {
                            case EduTrack.Domain.Enums.EducationalContentType.Text:
                                <div class="text-preview">
                                    @if (!string.IsNullOrEmpty(content.TextContent))
                                    {
                                        <p class="preview-text">@(content.TextContent.Length > 150 ? content.TextContent.Substring(0, 150) + "..." : content.TextContent)</p>
                                    }
                                </div>
                                break;
                                
                            case EduTrack.Domain.Enums.EducationalContentType.Image:
                                @if (content.File != null && !string.IsNullOrEmpty(content.File.FileUrl))
                                {
                                    <div class="image-preview">
                                        <img src="@content.File.FileUrl" alt="@content.Title" class="img-fluid rounded" style="max-height: 120px; width: 100%; object-fit: cover;">
                                    </div>
                                }
                                break;
                                
                            case EduTrack.Domain.Enums.EducationalContentType.Video:
                                @if (content.File != null && !string.IsNullOrEmpty(content.File.FileUrl))
                                {
                                    <div class="video-preview">
                                        <video controls class="w-100" style="max-height: 120px;">
                                            <source src="@content.File.FileUrl" type="@content.File.MimeType">
                                            مرورگر شما از پخش ویدیو پشتیبانی نمی‌کند.
                                        </video>
                                    </div>
                                }
                                else if (!string.IsNullOrEmpty(content.ExternalUrl))
                                {
                                    <div class="external-video-preview">
                                        <div class="embed-responsive embed-responsive-16by9">
                                            <iframe class="embed-responsive-item" src="@content.ExternalUrl" allowfullscreen></iframe>
                                        </div>
                                    </div>
                                }
                                break;
                                
                            case EduTrack.Domain.Enums.EducationalContentType.Audio:
                                @if (content.File != null && !string.IsNullOrEmpty(content.File.FileUrl))
                                {
                                    <div class="audio-preview">
                                        <audio controls class="w-100">
                                            <source src="@content.File.FileUrl" type="@content.File.MimeType">
                                            مرورگر شما از پخش صدا پشتیبانی نمی‌کند.
                                        </audio>
                                    </div>
                                }
                                break;
                                
                            case EduTrack.Domain.Enums.EducationalContentType.PDF:
                            case EduTrack.Domain.Enums.EducationalContentType.File:
                                @if (content.File != null && !string.IsNullOrEmpty(content.File.OriginalFileName))
                                {
                                    <div class="file-preview">
                                        <div class="file-info">
                                            <i class="fas fa-file me-2"></i>
                                            <span>@content.File.OriginalFileName</span>
                                            <small class="text-muted d-block">@FormatFileSize(content.File.FileSizeBytes)</small>
                                        </div>
                                    </div>
                                }
                                break;
                                
                            case EduTrack.Domain.Enums.EducationalContentType.ExternalUrl:
                                @if (!string.IsNullOrEmpty(content.ExternalUrl))
                                {
                                    <div class="external-url-preview">
                                        <div class="url-info">
                                            <i class="fas fa-external-link-alt me-2"></i>
                                            <a href="@content.ExternalUrl" target="_blank" class="text-decoration-none">
                                                @content.ExternalUrl
                                            </a>
                                        </div>
                                    </div>
                                }
                                break;
                        }
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="content-actions-footer">
                        <a asp-action="Edit" asp-route-id="@content.Id" class="action-btn-footer info">
                            <i class="fas fa-edit"></i>
                            <span>ویرایش</span>
                        </a>
                        @if (content.File != null && !string.IsNullOrEmpty(content.File.FileUrl))
                        {
                            <a href="@content.File.FileUrl" target="_blank" class="action-btn-footer primary">
                                <i class="fas fa-download"></i>
                                <span>دانلود</span>
                            </a>
                        }
                        @if (!string.IsNullOrEmpty(content.ExternalUrl))
                        {
                            <a href="@content.ExternalUrl" target="_blank" class="action-btn-footer success">
                                <i class="fas fa-external-link-alt"></i>
                                <span>مشاهده</span>
                            </a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State -->
    <div class="empty-state-minimal">
        <div class="empty-icon">
            <i class="fas fa-file-alt"></i>
        </div>
        <h3>هنوز محتوایی ایجاد نشده</h3>
        <p>اولین محتوای آموزشی خود را ایجاد کنید</p>
        <a asp-action="Create" asp-route-subChapterId="@ViewBag.SubChapterId" class="btn-action-primary">
            <i class="fas fa-plus"></i>
            <span>ایجاد محتوای جدید</span>
        </a>
    </div>
}

@functions {
    string GetContentTypeClass(EduTrack.Domain.Enums.EducationalContentType type)
    {
        return type switch
        {
            EduTrack.Domain.Enums.EducationalContentType.Text => "bg-info",
            EduTrack.Domain.Enums.EducationalContentType.Image => "bg-success",
            EduTrack.Domain.Enums.EducationalContentType.Video => "bg-danger",
            EduTrack.Domain.Enums.EducationalContentType.Audio => "bg-warning",
            EduTrack.Domain.Enums.EducationalContentType.PDF => "bg-primary",
            EduTrack.Domain.Enums.EducationalContentType.File => "bg-secondary",
            EduTrack.Domain.Enums.EducationalContentType.ExternalUrl => "bg-dark",
            _ => "bg-secondary"
        };
    }

    string GetContentTypeIcon(EduTrack.Domain.Enums.EducationalContentType type)
    {
        return type switch
        {
            EduTrack.Domain.Enums.EducationalContentType.Text => "fas fa-font",
            EduTrack.Domain.Enums.EducationalContentType.Image => "fas fa-image",
            EduTrack.Domain.Enums.EducationalContentType.Video => "fas fa-video",
            EduTrack.Domain.Enums.EducationalContentType.Audio => "fas fa-volume-up",
            EduTrack.Domain.Enums.EducationalContentType.PDF => "fas fa-file-pdf",
            EduTrack.Domain.Enums.EducationalContentType.File => "fas fa-file",
            EduTrack.Domain.Enums.EducationalContentType.ExternalUrl => "fas fa-external-link-alt",
            _ => "fas fa-file"
        };
    }

    string GetContentTypeName(EduTrack.Domain.Enums.EducationalContentType type)
    {
        return type switch
        {
            EduTrack.Domain.Enums.EducationalContentType.Text => "متن",
            EduTrack.Domain.Enums.EducationalContentType.Image => "تصویر",
            EduTrack.Domain.Enums.EducationalContentType.Video => "ویدیو",
            EduTrack.Domain.Enums.EducationalContentType.Audio => "صدا",
            EduTrack.Domain.Enums.EducationalContentType.PDF => "PDF",
            EduTrack.Domain.Enums.EducationalContentType.File => "فایل",
            EduTrack.Domain.Enums.EducationalContentType.ExternalUrl => "لینک خارجی",
            _ => "نامشخص"
        };
    }

    string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}

@section Styles {
    <style>
        /* Page Header Minimal */
        .page-header-minimal {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            border: 1px solid #e9ecef;
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2d3748;
            margin: 0;
        }

        .page-subtitle {
            font-size: 0.875rem;
            color: #718096;
            margin: 0.25rem 0 0 0;
        }

        .breadcrumb-link {
            color: #667eea;
            text-decoration: none;
            font-size: 0.875rem;
        }

        .breadcrumb-link:hover {
            color: #5a6fd8;
            text-decoration: underline;
        }

        .btn-action-primary {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.625rem 1.125rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            text-decoration: none;
            font-size: 0.813rem;
            font-weight: 500;
            transition: all 0.2s;
            border: none;
        }

        .btn-action-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
            color: white;
        }

        /* Filter Bar */
        .filter-bar-minimal {
            background: white;
            border-radius: 8px;
            padding: 0.875rem 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #e9ecef;
        }

        .filter-group {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .filter-btn-minimal {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-size: 0.813rem;
            font-weight: 500;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }

        .filter-btn-minimal:hover {
            background: #f7fafc;
            border-color: #cbd5e0;
        }

        .filter-btn-minimal.active {
            background: #667eea;
            border-color: #667eea;
            color: white;
        }

        .drag-info {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.75rem;
            color: #6c757d;
        }

        .drag-info i {
            color: #adb5bd;
        }

        /* Content List */
        .content-sortable-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .content-card-draggable {
            background: white;
            border-radius: 8px;
            border: 2px solid #e9ecef;
            overflow: hidden;
            transition: all 0.2s;
            cursor: move;
            position: relative;
            display: flex;
        }

        .content-card-draggable:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            border-color: #667eea;
        }

        .content-card-draggable.dragging {
            opacity: 0.5;
            transform: rotate(2deg);
        }

        .content-card-draggable.drag-over {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.05);
        }

        /* Drag Handle */
        .drag-handle-enhanced {
            width: 60px;
            background: #f8f9fa;
            border-left: 2px solid #e9ecef;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 0.375rem;
            padding: 0.75rem 0;
            transition: all 0.2s;
            flex-shrink: 0;
        }

        .move-btn-content {
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            color: #6c757d;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.75rem;
        }

        .move-btn-content:hover {
            background: #667eea;
            border-color: #667eea;
            color: white;
            transform: scale(1.05);
        }

        .move-btn-content:active {
            transform: scale(0.95);
        }

        .drag-lines {
            font-size: 1.25rem;
            color: #adb5bd;
            transition: all 0.2s;
            cursor: move;
            padding: 0.5rem 0;
        }

        .drag-handle-enhanced:hover .drag-lines {
            color: #667eea;
            transform: scale(1.1);
        }

        .drag-hint {
            font-size: 0.625rem;
            color: #adb5bd;
            writing-mode: vertical-rl;
            text-orientation: mixed;
            font-weight: 600;
            letter-spacing: 1px;
        }

        /* Card Content */
        .content-card-content {
            flex: 1;
            padding: 1rem;
        }

        .content-header-section {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.75rem;
        }

        .content-info {
            flex: 1;
        }

        .content-title-main {
            font-size: 1rem;
            font-weight: 600;
            color: #2d3748;
            margin: 0;
            line-height: 1.4;
        }

        .content-description {
            font-size: 0.813rem;
            color: #718096;
            margin: 0.25rem 0 0 0;
            line-height: 1.4;
        }

        .content-actions-top {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .toggle-switch-minimal {
            position: relative;
            width: 44px;
            height: 24px;
            cursor: pointer;
        }

        .toggle-switch-minimal input {
            display: none;
        }

        .toggle-slider-minimal {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #cbd5e0;
            border-radius: 12px;
            transition: 0.3s;
        }

        .toggle-slider-minimal:before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            left: 2px;
            bottom: 2px;
            background: white;
            border-radius: 50%;
            transition: 0.3s;
        }

        .toggle-switch-minimal input:checked + .toggle-slider-minimal {
            background: #48bb78;
        }

        .toggle-switch-minimal input:checked + .toggle-slider-minimal:before {
            transform: translateX(20px);
        }

        .btn-icon-minimal {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.2s;
        }

        .btn-icon-minimal:hover {
            background: #f7fafc;
            border-color: #cbd5e0;
        }

        /* Content Type Badge */
        .content-type-section {
            margin-bottom: 0.75rem;
        }

        .content-type-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
        }

        /* Content Preview */
        .content-preview-section {
            min-height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .preview-text {
            font-size: 0.9rem;
            line-height: 1.4;
            color: #6c757d;
            margin: 0;
        }

        .image-preview img {
            border-radius: 8px;
        }

        .file-info {
            text-align: center;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        .url-info {
            text-align: center;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        .embed-responsive {
            position: relative;
            display: block;
            width: 100%;
            padding: 0;
            overflow: hidden;
        }

        .embed-responsive::before {
            content: "";
            display: block;
            padding-top: 56.25%;
        }

        .embed-responsive-item {
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: 0;
        }

        /* Action Buttons */
        .content-actions-footer {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .action-btn-footer {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s;
            border: 1px solid transparent;
        }

        .action-btn-footer.primary {
            background: #667eea;
            color: white;
        }

        .action-btn-footer.primary:hover {
            background: #5568d3;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .action-btn-footer.success {
            background: #48bb78;
            color: white;
        }

        .action-btn-footer.success:hover {
            background: #38a169;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(72, 187, 120, 0.3);
        }

        .action-btn-footer.info {
            background: #4299e1;
            color: white;
        }

        .action-btn-footer.info:hover {
            background: #3182ce;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(66, 153, 225, 0.3);
        }

        /* Empty State */
        .empty-state-minimal {
            text-align: center;
            padding: 3rem 2rem;
            background: white;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .empty-icon {
            width: 64px;
            height: 64px;
            margin: 0 auto 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 50%;
            color: #667eea;
            font-size: 1.5rem;
        }

        .empty-state-minimal h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }

        .empty-state-minimal p {
            color: #718096;
            margin-bottom: 1.5rem;
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function() {
            // Enhanced Sortable with better visual feedback
            const contentsContainer = document.getElementById('contentsContainer');
            if (contentsContainer) {
                new Sortable(contentsContainer, {
                    animation: 200,
                    handle: '.drag-lines',
                    ghostClass: 'sortable-ghost',
                    chosenClass: 'sortable-chosen',
                    dragClass: 'sortable-drag',
                    forceFallback: true,
                    fallbackClass: 'sortable-fallback',
                    fallbackOnBody: true,
                    swapThreshold: 0.65,
                    onEnd: function(evt) {
                        updateContentsOrder();
                    }
                });
            }

            // Move up/down buttons for contents
            $('.move-btn-content').on('click', function(e) {
                e.stopPropagation();
                const contentId = $(this).data('content-id');
                const direction = $(this).data('direction');

                $.ajax({
                    url: '@Url.Action("MoveContent", "EducationalContent")',
                    type: 'POST',
                    data: { id: contentId, direction: direction },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            showToast('error', response.error || 'خطا در جابجایی');
                        }
                    },
                    error: function() {
                        showToast('error', 'خطا در ارتباط با سرور');
                    }
                });
            });

            // Filter functionality
            $('.filter-btn-minimal').on('click', function() {
                const filter = $(this).data('filter');
                
                // Update active button
                $('.filter-btn-minimal').removeClass('active');
                $(this).addClass('active');
                
                // Filter contents
                $('.content-card-draggable').each(function() {
                    const isActive = $(this).data('is-active') === 'true';
                    
                    if (filter === 'all') {
                        $(this).show();
                    } else if (filter === 'active' && isActive) {
                        $(this).show();
                    } else if (filter === 'inactive' && !isActive) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            });

            // Toggle content active status
            $('.toggle-content-active').on('change', function() {
                const contentId = $(this).data('content-id');
                const isChecked = $(this).prop('checked');
                const $toggle = $(this);

                $.ajax({
                    url: '@Url.Action("ToggleActive", "EducationalContent")',
                    type: 'POST',
                    data: { id: contentId },
                    success: function(response) {
                        if (response.success) {
                            const $card = $toggle.closest('.content-card-draggable');
                            $card.attr('data-status', response.isActive ? 'active' : 'inactive');
                            $card.attr('data-is-active', response.isActive ? 'true' : 'false');
                            showToast('success', response.isActive ? 'محتوا فعال شد' : 'محتوا غیرفعال شد');
                        } else {
                            $toggle.prop('checked', !isChecked);
                            showToast('error', response.error || 'خطا در تغییر وضعیت');
                        }
                    },
                    error: function() {
                        $toggle.prop('checked', !isChecked);
                        showToast('error', 'خطا در ارتباط با سرور');
                    }
                });
            });

            // Update contents order
            function updateContentsOrder() {
                const contentIds = [];
                $('.content-card-draggable').each(function() {
                    contentIds.push($(this).data('content-id'));
                });

                $.ajax({
                    url: '@Url.Action("ReorderContents", "EducationalContent")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(contentIds),
                    success: function(response) {
                        if (response.success) {
                            showToast('success', 'ترتیب محتوا به‌روز شد');
                        } else {
                            showToast('error', response.error || 'خطا در به‌روزرسانی ترتیب');
                        }
                    },
                    error: function() {
                        showToast('error', 'خطا در ارتباط با سرور');
                    }
                });
            }

            // Toast notification function
            function showToast(type, message) {
                // Simple toast implementation
                const toast = $(`
                    <div class="toast-notification ${type}">
                        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                        <span>${message}</span>
                    </div>
                `);
                
                $('body').append(toast);
                
                setTimeout(() => {
                    toast.fadeOut(() => toast.remove());
                }, 3000);
            }
        });
    </script>
}