// <auto-generated />
using System;
using EduTrack.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduTrack.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251008233612_UpdateTeachingSessionReportCreatedByTeacherId")]
    partial class UpdateTeachingSessionReportCreatedByTeacherId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduTrack.Domain.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Details")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedChoiceId")
                        .HasColumnType("int");

                    b.Property<string>("TextAnswer")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedChoiceId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Attempt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CorrectAnswers")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubmittedAt");

                    b.ToTable("Attempts");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("CourseId", "Order");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "Order");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("IsActive");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisciplineType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineType");

                    b.HasIndex("IsActive");

                    b.HasIndex("Order");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("GrantedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GrantedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevel");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("StudentId");

                    b.HasIndex("CourseId", "StudentId")
                        .IsUnique();

                    b.ToTable("CourseAccesses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EnrolledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastAccessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LearningMode")
                        .HasColumnType("int");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastAccessedAt");

                    b.HasIndex("LearningMode");

                    b.HasIndex("StudentId");

                    b.HasIndex("CourseId", "StudentId")
                        .IsUnique();

                    b.ToTable("CourseEnrollments");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.EducationalContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("FileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SubChapterId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.HasIndex("SubChapterId", "Order");

                    b.ToTable("EducationalContents");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EnrolledAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("StudentId");

                    b.HasIndex("ClassId", "StudentId")
                        .IsUnique();

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<bool>("ShowSolutions")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ExamId", "Order");

                    b.HasIndex("ExamId", "QuestionId")
                        .IsUnique();

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ReferenceCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FileName");

                    b.HasIndex("MD5Hash")
                        .IsUnique();

                    b.ToTable("Files");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentGroupId", "StudentId")
                        .IsUnique();

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EducationalContentId")
                        .HasColumnType("int");

                    b.Property<int>("InteractiveLessonId")
                        .HasColumnType("int");

                    b.Property<int?>("InteractiveQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalContentId");

                    b.HasIndex("InteractiveQuestionId");

                    b.HasIndex("IsActive");

                    b.HasIndex("InteractiveLessonId", "Order");

                    b.ToTable("InteractiveContentItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("CourseId", "Order");

                    b.ToTable("InteractiveLessons");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InteractiveLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssignedAt");

                    b.HasIndex("ClassId");

                    b.HasIndex("IsActive");

                    b.HasIndex("InteractiveLessonId", "ClassId")
                        .IsUnique();

                    b.ToTable("InteractiveLessonAssignments");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrangementType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("InteractiveLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("StageType")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementType");

                    b.HasIndex("IsActive");

                    b.HasIndex("StageType");

                    b.HasIndex("InteractiveLessonId", "Order");

                    b.ToTable("InteractiveLessonStages");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonSubChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InteractiveLessonId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SubChapterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("SubChapterId");

                    b.HasIndex("InteractiveLessonId", "Order");

                    b.HasIndex("InteractiveLessonId", "SubChapterId")
                        .IsUnique();

                    b.ToTable("InteractiveLessonSubChapters");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ImageFileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.ToTable("InteractiveQuestions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ModuleId", "Order");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("CourseId", "Order");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("int");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Streak")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("LessonId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Explanation")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Type");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.QuestionChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InteractiveQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("InteractiveQuestionId", "Order");

                    b.ToTable("QuestionChoices");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("LessonId", "Order");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DisciplineHint")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SessionReportId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TeachingPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("IsMandatory");

                    b.HasIndex("LessonId");

                    b.HasIndex("SessionReportId");

                    b.HasIndex("StartDate");

                    b.HasIndex("Type");

                    b.HasIndex("GroupId", "DueDate");

                    b.HasIndex("TeachingPlanId", "StartDate");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ScheduleItemAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleItemId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.HasIndex("ScheduleItemId", "StudentId", "GroupId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL AND [GroupId] IS NOT NULL");

                    b.ToTable("ScheduleItemAssignments", (string)null);
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StageContentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EducationalContentId")
                        .HasColumnType("int");

                    b.Property<int>("InteractiveLessonStageId")
                        .HasColumnType("int");

                    b.Property<int?>("InteractiveQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EducationalContentId");

                    b.HasIndex("InteractiveQuestionId");

                    b.HasIndex("IsActive");

                    b.HasIndex("InteractiveLessonStageId", "Order");

                    b.ToTable("StageContentItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset>("AnsweredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("BooleanAnswer")
                        .HasColumnType("bit");

                    b.Property<string>("Feedback")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("GradedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InteractiveQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("PointsEarned")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedChoiceId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnsweredAt");

                    b.HasIndex("InteractiveQuestionId");

                    b.HasIndex("SelectedChoiceId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAnswers");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TeachingPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeachingPlanId");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ChapterId", "Order");

                    b.ToTable("SubChapters");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedbackText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal?>("Grade")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ReviewedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ScheduleItemId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("SubmittedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TeacherId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleItemId");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("TeacherId");

                    b.HasIndex("ScheduleItemId", "StudentId")
                        .IsUnique();

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Objectives")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeachingPlans");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingPlanProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FirstTaughtDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastTaughtDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OverallProgressPercentage")
                        .HasColumnType("int");

                    b.Property<int>("OverallStatus")
                        .HasColumnType("int");

                    b.Property<int>("SessionsCount")
                        .HasColumnType("int");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TeachingPlanId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FirstTaughtDate");

                    b.HasIndex("LastTaughtDate");

                    b.HasIndex("OverallStatus");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("SubTopicId");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("TeachingPlanId", "SubTopicId", "StudentGroupId")
                        .IsUnique();

                    b.ToTable("TeachingPlanProgresses", null, t =>
                        {
                            t.HasCheckConstraint("CK_OverallProgressPercentage", "OverallProgressPercentage >= 0 AND OverallProgressPercentage <= 100");

                            t.HasCheckConstraint("CK_OverallStatus", "OverallStatus IN (0,1,2,3,4)");

                            t.HasCheckConstraint("CK_SessionsCount", "SessionsCount >= 0");
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("ParticipationScore")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeachingSessionReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeachingSessionReportId", "StudentId")
                        .IsUnique();

                    b.ToTable("TeachingSessionAttendances", (string)null);
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AchievedLessonsJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("AchievedObjectives")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("AchievedSubTopicsJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("AdditionalTopicsCovered")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Challenges")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset>("CompletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupFeedback")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("NextSessionRecommendations")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("ParticipationLevel")
                        .HasColumnType("int");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeachingSessionReportId")
                        .HasColumnType("int");

                    b.Property<string>("UncoveredPlannedTopics")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("UncoveredReasons")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("UnderstandingLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("TeachingSessionReportId", "StudentGroupId")
                        .IsUnique();

                    b.ToTable("TeachingSessionExecutions", null, t =>
                        {
                            t.HasCheckConstraint("CK_ParticipationLevel", "ParticipationLevel >= 1 AND ParticipationLevel <= 5");

                            t.HasCheckConstraint("CK_UnderstandingLevel", "UnderstandingLevel >= 1 AND UnderstandingLevel <= 5");
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalTopics")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset>("PlannedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PlannedLessonsJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PlannedObjectives")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("PlannedSubTopicsJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("TeachingSessionReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlannedAt");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("TeachingSessionReportId", "StudentGroupId")
                        .IsUnique();

                    b.ToTable("TeachingSessionPlans", (string)null);
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CreatedByTeacherId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTimeOffset>("SessionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TeachingPlanId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByTeacherId");

                    b.HasIndex("SessionDate");

                    b.HasIndex("TeachingPlanId");

                    b.ToTable("TeachingSessionReports", (string)null);
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionTopicCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Challenges")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("CoveragePercentage")
                        .HasColumnType("int");

                    b.Property<int>("CoverageStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("StudentGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("SubChapterId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherNotes")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("TeachingSessionReportId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TopicType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("WasCovered")
                        .HasColumnType("bit");

                    b.Property<bool>("WasPlanned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentGroupId");

                    b.HasIndex("SubChapterId");

                    b.HasIndex("TeachingSessionReportId", "StudentGroupId", "TopicType", "TopicId");

                    b.ToTable("TeachingSessionTopicCoverages", null, t =>
                        {
                            t.HasCheckConstraint("CK_CoveragePercentage", "CoveragePercentage >= 0 AND CoveragePercentage <= 100");

                            t.HasCheckConstraint("CK_CoverageStatus", "CoverageStatus IN (0,1,2,3)");

                            t.HasCheckConstraint("CK_TopicType", "TopicType IN ('SubTopic', 'Lesson', 'Additional')");
                        });
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ActivityLog", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Answer", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Attempt", "Attempt")
                        .WithMany("Answers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.Choice", "SelectedChoice")
                        .WithMany()
                        .HasForeignKey("SelectedChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attempt");

                    b.Navigation("Question");

                    b.Navigation("SelectedChoice");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Attempt", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Exam", "Exam")
                        .WithMany("Attempts")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("Attempts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Chapter", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Choice", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Class", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseAccess", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Accesses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("CourseAccesses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.CourseEnrollment", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("CourseEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.EducationalContent", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.File", "File")
                        .WithMany("EducationalContents")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EduTrack.Domain.Entities.SubChapter", "SubChapter")
                        .WithMany("EducationalContents")
                        .HasForeignKey("SubChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("SubChapter");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Enrollment", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ExamQuestion", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("Members")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudentGroup");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveContentItem", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.EducationalContent", "EducationalContent")
                        .WithMany()
                        .HasForeignKey("EducationalContentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EduTrack.Domain.Entities.InteractiveLesson", "InteractiveLesson")
                        .WithMany("ContentItems")
                        .HasForeignKey("InteractiveLessonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.InteractiveQuestion", "InteractiveQuestion")
                        .WithMany()
                        .HasForeignKey("InteractiveQuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EducationalContent");

                    b.Navigation("InteractiveLesson");

                    b.Navigation("InteractiveQuestion");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLesson", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonAssignment", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.InteractiveLesson", "InteractiveLesson")
                        .WithMany()
                        .HasForeignKey("InteractiveLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("InteractiveLesson");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonStage", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.InteractiveLesson", "InteractiveLesson")
                        .WithMany("Stages")
                        .HasForeignKey("InteractiveLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractiveLesson");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonSubChapter", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.InteractiveLesson", "InteractiveLesson")
                        .WithMany("SubChapters")
                        .HasForeignKey("InteractiveLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.SubChapter", "SubChapter")
                        .WithMany()
                        .HasForeignKey("SubChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractiveLesson");

                    b.Navigation("SubChapter");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveQuestion", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.File", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Module", "Module")
                        .WithMany("Lessons")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Module", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Profile", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("EduTrack.Domain.Entities.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Progress", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduTrack.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Progresses")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("Progresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.QuestionChoice", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.InteractiveQuestion", "InteractiveQuestion")
                        .WithMany("Choices")
                        .HasForeignKey("InteractiveQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractiveQuestion");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Resource", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Resources")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ScheduleItem", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EduTrack.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EduTrack.Domain.Entities.TeachingSessionReport", "SessionReport")
                        .WithMany()
                        .HasForeignKey("SessionReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EduTrack.Domain.Entities.TeachingPlan", "TeachingPlan")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("TeachingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Lesson");

                    b.Navigation("SessionReport");

                    b.Navigation("TeachingPlan");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ScheduleItemAssignment", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.ScheduleItem", "ScheduleItem")
                        .WithMany("Assignments")
                        .HasForeignKey("ScheduleItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ScheduleItem");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StageContentItem", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.EducationalContent", "EducationalContent")
                        .WithMany()
                        .HasForeignKey("EducationalContentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EduTrack.Domain.Entities.InteractiveLessonStage", "InteractiveLessonStage")
                        .WithMany("ContentItems")
                        .HasForeignKey("InteractiveLessonStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.InteractiveQuestion", "InteractiveQuestion")
                        .WithMany()
                        .HasForeignKey("InteractiveQuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("EducationalContent");

                    b.Navigation("InteractiveLessonStage");

                    b.Navigation("InteractiveQuestion");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentAnswer", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.InteractiveQuestion", "InteractiveQuestion")
                        .WithMany()
                        .HasForeignKey("InteractiveQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.QuestionChoice", "SelectedChoice")
                        .WithMany()
                        .HasForeignKey("SelectedChoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractiveQuestion");

                    b.Navigation("SelectedChoice");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.TeachingPlan", "TeachingPlan")
                        .WithMany("Groups")
                        .HasForeignKey("TeachingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeachingPlan");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubChapter", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Chapter", "Chapter")
                        .WithMany("SubChapters")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Submission", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.ScheduleItem", "ScheduleItem")
                        .WithMany()
                        .HasForeignKey("ScheduleItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Student")
                        .WithMany("Submissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ScheduleItem");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingPlan", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Course", "Course")
                        .WithMany("TeachingPlans")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", "Teacher")
                        .WithMany("TeachingPlans")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingPlanProgress", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("PlanProgresses")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.SubChapter", "SubTopic")
                        .WithMany("PlanProgresses")
                        .HasForeignKey("SubTopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.TeachingPlan", "TeachingPlan")
                        .WithMany("PlanProgresses")
                        .HasForeignKey("TeachingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("SubTopic");

                    b.Navigation("TeachingPlan");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionAttendance", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.TeachingSessionReport", "TeachingSessionReport")
                        .WithMany("Attendance")
                        .HasForeignKey("TeachingSessionReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeachingSessionReport");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionExecution", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("SessionExecutions")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.TeachingSessionReport", "TeachingSessionReport")
                        .WithMany("Executions")
                        .HasForeignKey("TeachingSessionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("TeachingSessionReport");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionPlan", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("SessionPlans")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.TeachingSessionReport", "TeachingSessionReport")
                        .WithMany("Plans")
                        .HasForeignKey("TeachingSessionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("TeachingSessionReport");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionReport", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.TeachingPlan", "TeachingPlan")
                        .WithMany()
                        .HasForeignKey("TeachingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeachingPlan");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionTopicCoverage", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.Lesson", null)
                        .WithMany("TopicCoverages")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduTrack.Domain.Entities.StudentGroup", "StudentGroup")
                        .WithMany("TopicCoverages")
                        .HasForeignKey("StudentGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.SubChapter", null)
                        .WithMany("TopicCoverages")
                        .HasForeignKey("SubChapterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduTrack.Domain.Entities.TeachingSessionReport", "TeachingSessionReport")
                        .WithMany("TopicCoverages")
                        .HasForeignKey("TeachingSessionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentGroup");

                    b.Navigation("TeachingSessionReport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduTrack.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EduTrack.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Attempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("SubChapters");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Class", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Course", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Chapters");

                    b.Navigation("Classes");

                    b.Navigation("Enrollments");

                    b.Navigation("Modules");

                    b.Navigation("TeachingPlans");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Exam", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.File", b =>
                {
                    b.Navigation("EducationalContents");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLesson", b =>
                {
                    b.Navigation("ContentItems");

                    b.Navigation("Stages");

                    b.Navigation("SubChapters");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveLessonStage", b =>
                {
                    b.Navigation("ContentItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.InteractiveQuestion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Progresses");

                    b.Navigation("Resources");

                    b.Navigation("TopicCoverages");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Module", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Choices");

                    b.Navigation("ExamQuestions");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.ScheduleItem", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.StudentGroup", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("PlanProgresses");

                    b.Navigation("SessionExecutions");

                    b.Navigation("SessionPlans");

                    b.Navigation("TopicCoverages");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.SubChapter", b =>
                {
                    b.Navigation("EducationalContents");

                    b.Navigation("PlanProgresses");

                    b.Navigation("TopicCoverages");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingPlan", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("PlanProgresses");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.TeachingSessionReport", b =>
                {
                    b.Navigation("Attendance");

                    b.Navigation("Executions");

                    b.Navigation("Plans");

                    b.Navigation("TopicCoverages");
                });

            modelBuilder.Entity("EduTrack.Domain.Entities.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Attempts");

                    b.Navigation("Classes");

                    b.Navigation("CourseAccesses");

                    b.Navigation("CourseEnrollments");

                    b.Navigation("Enrollments");

                    b.Navigation("Profile");

                    b.Navigation("Progresses");

                    b.Navigation("Submissions");

                    b.Navigation("TeachingPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
